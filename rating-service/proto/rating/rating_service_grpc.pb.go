// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.3
// source: rating_service.proto

package ratingGrpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RatingService_RateAccommodation_FullMethodName             = "/RatingService/RateAccommodation"
	RatingService_DeleteAccommodationRating_FullMethodName     = "/RatingService/DeleteAccommodationRating"
	RatingService_UpdateAccommodationRating_FullMethodName     = "/RatingService/UpdateAccommodationRating"
	RatingService_GetAllAccommodationRatings_FullMethodName    = "/RatingService/GetAllAccommodationRatings"
	RatingService_GetAverageAccommodationRating_FullMethodName = "/RatingService/GetAverageAccommodationRating"
	RatingService_FindAccommodationRatingById_FullMethodName   = "/RatingService/FindAccommodationRatingById"
	RatingService_RateHost_FullMethodName                      = "/RatingService/RateHost"
	RatingService_UpdateHostRating_FullMethodName              = "/RatingService/UpdateHostRating"
	RatingService_DeleteHostRating_FullMethodName              = "/RatingService/DeleteHostRating"
	RatingService_GetHostRatings_FullMethodName                = "/RatingService/GetHostRatings"
)

// RatingServiceClient is the client API for RatingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RatingServiceClient interface {
	RateAccommodation(ctx context.Context, in *RateAccommodationRequest, opts ...grpc.CallOption) (*RateAccommodationResponse, error)
	DeleteAccommodationRating(ctx context.Context, in *DeleteAccommodationRatingRequest, opts ...grpc.CallOption) (*DeleteAccommodationRatingResponse, error)
	UpdateAccommodationRating(ctx context.Context, in *UpdateAccommodationRatingRequest, opts ...grpc.CallOption) (*UpdateAccommodationRatingResponse, error)
	GetAllAccommodationRatings(ctx context.Context, in *GetAllAccommodationRatingsRequest, opts ...grpc.CallOption) (*GetAllAccommodationRatingsResponse, error)
	GetAverageAccommodationRating(ctx context.Context, in *GetAverageAccommodationRatingRequest, opts ...grpc.CallOption) (*GetAverageAccommodationRatingResponse, error)
	FindAccommodationRatingById(ctx context.Context, in *FindAccommodationRatingByIdRequest, opts ...grpc.CallOption) (*FindAccommodationRatingByIdResponse, error)
	RateHost(ctx context.Context, in *RateHostRequest, opts ...grpc.CallOption) (*RateHostResponse, error)
	UpdateHostRating(ctx context.Context, in *UpdateHostRatingRequest, opts ...grpc.CallOption) (*UpdateHostRatingResponse, error)
	DeleteHostRating(ctx context.Context, in *DeleteHostRatingRequest, opts ...grpc.CallOption) (*DeleteHostRatingResponse, error)
	GetHostRatings(ctx context.Context, in *GetHostRatingsRequest, opts ...grpc.CallOption) (*GetHostRatingsResponse, error)
}

type ratingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRatingServiceClient(cc grpc.ClientConnInterface) RatingServiceClient {
	return &ratingServiceClient{cc}
}

func (c *ratingServiceClient) RateAccommodation(ctx context.Context, in *RateAccommodationRequest, opts ...grpc.CallOption) (*RateAccommodationResponse, error) {
	out := new(RateAccommodationResponse)
	err := c.cc.Invoke(ctx, RatingService_RateAccommodation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ratingServiceClient) DeleteAccommodationRating(ctx context.Context, in *DeleteAccommodationRatingRequest, opts ...grpc.CallOption) (*DeleteAccommodationRatingResponse, error) {
	out := new(DeleteAccommodationRatingResponse)
	err := c.cc.Invoke(ctx, RatingService_DeleteAccommodationRating_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ratingServiceClient) UpdateAccommodationRating(ctx context.Context, in *UpdateAccommodationRatingRequest, opts ...grpc.CallOption) (*UpdateAccommodationRatingResponse, error) {
	out := new(UpdateAccommodationRatingResponse)
	err := c.cc.Invoke(ctx, RatingService_UpdateAccommodationRating_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ratingServiceClient) GetAllAccommodationRatings(ctx context.Context, in *GetAllAccommodationRatingsRequest, opts ...grpc.CallOption) (*GetAllAccommodationRatingsResponse, error) {
	out := new(GetAllAccommodationRatingsResponse)
	err := c.cc.Invoke(ctx, RatingService_GetAllAccommodationRatings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ratingServiceClient) GetAverageAccommodationRating(ctx context.Context, in *GetAverageAccommodationRatingRequest, opts ...grpc.CallOption) (*GetAverageAccommodationRatingResponse, error) {
	out := new(GetAverageAccommodationRatingResponse)
	err := c.cc.Invoke(ctx, RatingService_GetAverageAccommodationRating_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ratingServiceClient) FindAccommodationRatingById(ctx context.Context, in *FindAccommodationRatingByIdRequest, opts ...grpc.CallOption) (*FindAccommodationRatingByIdResponse, error) {
	out := new(FindAccommodationRatingByIdResponse)
	err := c.cc.Invoke(ctx, RatingService_FindAccommodationRatingById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ratingServiceClient) RateHost(ctx context.Context, in *RateHostRequest, opts ...grpc.CallOption) (*RateHostResponse, error) {
	out := new(RateHostResponse)
	err := c.cc.Invoke(ctx, RatingService_RateHost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ratingServiceClient) UpdateHostRating(ctx context.Context, in *UpdateHostRatingRequest, opts ...grpc.CallOption) (*UpdateHostRatingResponse, error) {
	out := new(UpdateHostRatingResponse)
	err := c.cc.Invoke(ctx, RatingService_UpdateHostRating_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ratingServiceClient) DeleteHostRating(ctx context.Context, in *DeleteHostRatingRequest, opts ...grpc.CallOption) (*DeleteHostRatingResponse, error) {
	out := new(DeleteHostRatingResponse)
	err := c.cc.Invoke(ctx, RatingService_DeleteHostRating_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ratingServiceClient) GetHostRatings(ctx context.Context, in *GetHostRatingsRequest, opts ...grpc.CallOption) (*GetHostRatingsResponse, error) {
	out := new(GetHostRatingsResponse)
	err := c.cc.Invoke(ctx, RatingService_GetHostRatings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RatingServiceServer is the server API for RatingService service.
// All implementations must embed UnimplementedRatingServiceServer
// for forward compatibility
type RatingServiceServer interface {
	RateAccommodation(context.Context, *RateAccommodationRequest) (*RateAccommodationResponse, error)
	DeleteAccommodationRating(context.Context, *DeleteAccommodationRatingRequest) (*DeleteAccommodationRatingResponse, error)
	UpdateAccommodationRating(context.Context, *UpdateAccommodationRatingRequest) (*UpdateAccommodationRatingResponse, error)
	GetAllAccommodationRatings(context.Context, *GetAllAccommodationRatingsRequest) (*GetAllAccommodationRatingsResponse, error)
	GetAverageAccommodationRating(context.Context, *GetAverageAccommodationRatingRequest) (*GetAverageAccommodationRatingResponse, error)
	FindAccommodationRatingById(context.Context, *FindAccommodationRatingByIdRequest) (*FindAccommodationRatingByIdResponse, error)
	RateHost(context.Context, *RateHostRequest) (*RateHostResponse, error)
	UpdateHostRating(context.Context, *UpdateHostRatingRequest) (*UpdateHostRatingResponse, error)
	DeleteHostRating(context.Context, *DeleteHostRatingRequest) (*DeleteHostRatingResponse, error)
	GetHostRatings(context.Context, *GetHostRatingsRequest) (*GetHostRatingsResponse, error)
	mustEmbedUnimplementedRatingServiceServer()
}

// UnimplementedRatingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRatingServiceServer struct {
}

func (UnimplementedRatingServiceServer) RateAccommodation(context.Context, *RateAccommodationRequest) (*RateAccommodationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RateAccommodation not implemented")
}
func (UnimplementedRatingServiceServer) DeleteAccommodationRating(context.Context, *DeleteAccommodationRatingRequest) (*DeleteAccommodationRatingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAccommodationRating not implemented")
}
func (UnimplementedRatingServiceServer) UpdateAccommodationRating(context.Context, *UpdateAccommodationRatingRequest) (*UpdateAccommodationRatingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAccommodationRating not implemented")
}
func (UnimplementedRatingServiceServer) GetAllAccommodationRatings(context.Context, *GetAllAccommodationRatingsRequest) (*GetAllAccommodationRatingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllAccommodationRatings not implemented")
}
func (UnimplementedRatingServiceServer) GetAverageAccommodationRating(context.Context, *GetAverageAccommodationRatingRequest) (*GetAverageAccommodationRatingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAverageAccommodationRating not implemented")
}
func (UnimplementedRatingServiceServer) FindAccommodationRatingById(context.Context, *FindAccommodationRatingByIdRequest) (*FindAccommodationRatingByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAccommodationRatingById not implemented")
}
func (UnimplementedRatingServiceServer) RateHost(context.Context, *RateHostRequest) (*RateHostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RateHost not implemented")
}
func (UnimplementedRatingServiceServer) UpdateHostRating(context.Context, *UpdateHostRatingRequest) (*UpdateHostRatingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHostRating not implemented")
}
func (UnimplementedRatingServiceServer) DeleteHostRating(context.Context, *DeleteHostRatingRequest) (*DeleteHostRatingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteHostRating not implemented")
}
func (UnimplementedRatingServiceServer) GetHostRatings(context.Context, *GetHostRatingsRequest) (*GetHostRatingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHostRatings not implemented")
}
func (UnimplementedRatingServiceServer) mustEmbedUnimplementedRatingServiceServer() {}

// UnsafeRatingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RatingServiceServer will
// result in compilation errors.
type UnsafeRatingServiceServer interface {
	mustEmbedUnimplementedRatingServiceServer()
}

func RegisterRatingServiceServer(s grpc.ServiceRegistrar, srv RatingServiceServer) {
	s.RegisterService(&RatingService_ServiceDesc, srv)
}

func _RatingService_RateAccommodation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RateAccommodationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RatingServiceServer).RateAccommodation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RatingService_RateAccommodation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RatingServiceServer).RateAccommodation(ctx, req.(*RateAccommodationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RatingService_DeleteAccommodationRating_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAccommodationRatingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RatingServiceServer).DeleteAccommodationRating(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RatingService_DeleteAccommodationRating_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RatingServiceServer).DeleteAccommodationRating(ctx, req.(*DeleteAccommodationRatingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RatingService_UpdateAccommodationRating_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAccommodationRatingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RatingServiceServer).UpdateAccommodationRating(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RatingService_UpdateAccommodationRating_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RatingServiceServer).UpdateAccommodationRating(ctx, req.(*UpdateAccommodationRatingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RatingService_GetAllAccommodationRatings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllAccommodationRatingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RatingServiceServer).GetAllAccommodationRatings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RatingService_GetAllAccommodationRatings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RatingServiceServer).GetAllAccommodationRatings(ctx, req.(*GetAllAccommodationRatingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RatingService_GetAverageAccommodationRating_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAverageAccommodationRatingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RatingServiceServer).GetAverageAccommodationRating(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RatingService_GetAverageAccommodationRating_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RatingServiceServer).GetAverageAccommodationRating(ctx, req.(*GetAverageAccommodationRatingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RatingService_FindAccommodationRatingById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAccommodationRatingByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RatingServiceServer).FindAccommodationRatingById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RatingService_FindAccommodationRatingById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RatingServiceServer).FindAccommodationRatingById(ctx, req.(*FindAccommodationRatingByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RatingService_RateHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RateHostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RatingServiceServer).RateHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RatingService_RateHost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RatingServiceServer).RateHost(ctx, req.(*RateHostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RatingService_UpdateHostRating_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHostRatingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RatingServiceServer).UpdateHostRating(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RatingService_UpdateHostRating_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RatingServiceServer).UpdateHostRating(ctx, req.(*UpdateHostRatingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RatingService_DeleteHostRating_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteHostRatingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RatingServiceServer).DeleteHostRating(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RatingService_DeleteHostRating_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RatingServiceServer).DeleteHostRating(ctx, req.(*DeleteHostRatingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RatingService_GetHostRatings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHostRatingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RatingServiceServer).GetHostRatings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RatingService_GetHostRatings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RatingServiceServer).GetHostRatings(ctx, req.(*GetHostRatingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RatingService_ServiceDesc is the grpc.ServiceDesc for RatingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RatingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "RatingService",
	HandlerType: (*RatingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RateAccommodation",
			Handler:    _RatingService_RateAccommodation_Handler,
		},
		{
			MethodName: "DeleteAccommodationRating",
			Handler:    _RatingService_DeleteAccommodationRating_Handler,
		},
		{
			MethodName: "UpdateAccommodationRating",
			Handler:    _RatingService_UpdateAccommodationRating_Handler,
		},
		{
			MethodName: "GetAllAccommodationRatings",
			Handler:    _RatingService_GetAllAccommodationRatings_Handler,
		},
		{
			MethodName: "GetAverageAccommodationRating",
			Handler:    _RatingService_GetAverageAccommodationRating_Handler,
		},
		{
			MethodName: "FindAccommodationRatingById",
			Handler:    _RatingService_FindAccommodationRatingById_Handler,
		},
		{
			MethodName: "RateHost",
			Handler:    _RatingService_RateHost_Handler,
		},
		{
			MethodName: "UpdateHostRating",
			Handler:    _RatingService_UpdateHostRating_Handler,
		},
		{
			MethodName: "DeleteHostRating",
			Handler:    _RatingService_DeleteHostRating_Handler,
		},
		{
			MethodName: "GetHostRatings",
			Handler:    _RatingService_GetHostRatings_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rating_service.proto",
}
