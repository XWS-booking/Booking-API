version: "3.8"

x-logging: &fluent-bit
  driver: fluentd
  options:
    fluentd-address: ${FLUENT_BIT_ADDRESS}:24224

services:
  accomodation_service:
    image: accomodation_service
    container_name: accomodation_service
    hostname: accomodation_service
    build:
      context: ./accomodation-service/
      dockerfile: Dockerfile
    restart: always
    environment:
      PORT: 9000
      DATABASE_NAME: BOOKING_ACCOMODATION
      STORAGE_URL: https://xcyrzflhnfgpyzfdzalc.supabase.co/storage/v1
      STORAGE_SERVICE_TOKEN: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InhjeXJ6ZmxobmZncHl6ZmR6YWxjIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTY4MDYzODU0NSwiZXhwIjoxOTk2MjE0NTQ1fQ.CJURcOscoWrsZ1A0tkCLbjK854YUvvzYRFoO7Q-gRs8
      STORAGE_MAIN_BUCKET: pictures
      DATABASE_CONNECTION_STRING: mongodb+srv://xws:lozinka123@cluster0.yqfgbck.mongodb.net/?retryWrites=true&w=majority
      NATS_HOST: ${NATS_HOST}
      NATS_PORT: ${NATS_PORT}
      NATS_USER: ${NATS_USER}
      NATS_PASS: ${NATS_PASS}
      DELETE_HOST_COMMAND_SUBJECT: ${DELETE_HOST_COMMAND_SUBJECT}
      DELETE_HOST_REPLY_SUBJECT: ${DELETE_HOST_REPLY_SUBJECT}
      JAEGER_ENDPOINT: http://jaeger:14268/api/traces
    logging: *fluent-bit
    networks:
      - network
      - monitoring
  reservation_service:
    image: reservation_service
    container_name: reservation_service
    hostname: reservation_service
    build:
      context: ./reservation-service/
      dockerfile: Dockerfile
    restart: always
    environment:
      PORT: 9000
      DATABASE_NAME: BOOKING_RESERVATION
      JWT_SECRET: secret
      DATABASE_CONNECTION_STRING: mongodb+srv://xws:lozinka123@cluster0.yqfgbck.mongodb.net/?retryWrites=true&w=majority
      NATS_HOST: ${NATS_HOST}
      NATS_PORT: ${NATS_PORT}
      NATS_USER: ${NATS_USER}
      NATS_PASS: ${NATS_PASS}
      DELETE_HOST_COMMAND_SUBJECT: ${DELETE_HOST_COMMAND_SUBJECT}
      DELETE_HOST_REPLY_SUBJECT: ${DELETE_HOST_REPLY_SUBJECT}
      JAEGER_ENDPOINT: http://jaeger:14268/api/traces
    logging: *fluent-bit
    networks:
      - network
      - monitoring
  rating_service:
    image: rating_service
    container_name: rating_service
    hostname: rating_service
    build:
      context: ./rating-service/
      dockerfile: Dockerfile
    restart: always
    environment:
      PORT: 9000
      DATABASE_NAME: BOOKING_RATING
      JWT_SECRET: secret
      DATABASE_CONNECTION_STRING: mongodb+srv://xws:lozinka123@cluster0.yqfgbck.mongodb.net/?retryWrites=true&w=majority
      JAEGER_ENDPOINT: http://jaeger:14268/api/traces
      NATS_HOST: ${NATS_HOST}
      NATS_PORT: ${NATS_PORT}
      NATS_USER: ${NATS_USER}
      NATS_PASS: ${NATS_PASS}
    logging: *fluent-bit
    networks:
      - network
      - monitoring
  auth_service:
    image: auth_service
    container_name: auth_service
    hostname: auth_service
    build:
      context: ./auth-service/
      dockerfile: Dockerfile
    restart: always
    environment:
      PORT: 9000
      DATABASE_NAME: BOOKING_AUTH
      JWT_SECRET: secret
      DATABASE_CONNECTION_STRING: mongodb+srv://xws:lozinka123@cluster0.yqfgbck.mongodb.net/?retryWrites=true&w=majority
      NATS_HOST: ${NATS_HOST}
      NATS_PORT: ${NATS_PORT}
      NATS_USER: ${NATS_USER}
      NATS_PASS: ${NATS_PASS}
      DELETE_HOST_COMMAND_SUBJECT: ${DELETE_HOST_COMMAND_SUBJECT}
      DELETE_HOST_REPLY_SUBJECT: ${DELETE_HOST_REPLY_SUBJECT}
      JAEGER_ENDPOINT: http://jaeger:14268/api/traces
    logging: *fluent-bit
    networks:
      - network
      - monitoring
  notification_service:
    image: notification_service
    container_name: notification_service
    hostname: notification_service
    build:
      context: ./notification-service/
      dockerfile: Dockerfile
    restart: always
    environment:
      PORT: 9000
      DATABASE_NAME: BOOKING_NOTIFICATION
      JWT_SECRET: secret
      DATABASE_CONNECTION_STRING: mongodb+srv://xws:lozinka123@cluster0.yqfgbck.mongodb.net/?retryWrites=true&w=majority
      JAEGER_ENDPOINT: http://jaeger:14268/api/traces
    logging: *fluent-bit
    networks:
      - network
      - monitoring
  recommendation-service:
    image: recommendation_service
    container_name: recommendation_service
    hostname: recommendation_service
    build:
      context: ./recommendation-service/
      dockerfile: Dockerfile
    restart: always
    environment:
      PORT: 9000
      NEO4J_URI: neo4j+s://85621d27.databases.neo4j.io
      NEO4J_USERNAME: neo4j
      NEO4J_PASSWORD: Tg2NvhIWfLZQ5QjgFKSQhKVhZxzZqVDfmF1MD-nRYqk
      NATS_HOST: ${NATS_HOST}
      NATS_PORT: ${NATS_PORT}
      NATS_USER: ${NATS_USER}
      NATS_PASS: ${NATS_PASS}
    logging: *fluent-bit
    networks:
      - network
      - monitoring
  api_gateway:
    image: api_gateway
    container_name: api_gateway
    hostname: api_gateway
    build:
      context: ./api-gateway/
      dockerfile: Dockerfile
    restart: always
    environment:
      AUTH_SERVICE_ADDRESS: auth_service:9000
      ACCOMODATION_SERVICE_ADDRESS: accomodation_service:9000
      RESERVATION_SERVICE_ADDRESS: reservation_service:9000
      RATING_SERVICE_ADDRESS: rating_service:9000
      NOTIFICATION_SERVICE_ADDRESS: notification_service:9000
      RECOMMENDATION_SERVICE_ADDRESS: recommendation_service:9000
      JWT_SECRET: secret
      GATEWAY_ADDRESS: 8085
    logging: *fluent-bit
    depends_on:
      - auth_service
    networks:
      - network
      - monitoring
    ports:
      - "8085:8085"
  nodejs_server:
    build:
      context: ./socket-io-server2/
      dockerfile: Dockerfile
    restart: always
    ports:
      - "8080:8080"
    networks:
      - network
      - monitoring

  nats:
    image: nats
    container_name: nats
    restart: on-failure
    networks:
      - network

networks:
  network:
    driver: bridge
  monitoring:
    external: true
