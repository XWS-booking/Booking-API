// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.3
// source: gateway_service.proto

package gateway

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AuthService_SignIn_FullMethodName                        = "/AuthService/SignIn"
	AuthService_Register_FullMethodName                      = "/AuthService/Register"
	AuthService_UpdatePersonalInfo_FullMethodName            = "/AuthService/UpdatePersonalInfo"
	AuthService_ChangeHostDistinguishedStatus_FullMethodName = "/AuthService/ChangeHostDistinguishedStatus"
	AuthService_DeleteProfile_FullMethodName                 = "/AuthService/DeleteProfile"
	AuthService_GetUser_FullMethodName                       = "/AuthService/GetUser"
	AuthService_FindById_FullMethodName                      = "/AuthService/FindById"
	AuthService_ChangePassword_FullMethodName                = "/AuthService/ChangePassword"
	AuthService_GetHostRatingWithGuestInfo_FullMethodName    = "/AuthService/GetHostRatingWithGuestInfo"
	AuthService_ProfileDeletion_FullMethodName               = "/AuthService/ProfileDeletion"
	AuthService_GetFeaturedHosts_FullMethodName              = "/AuthService/GetFeaturedHosts"
)

// AuthServiceClient is the client API for AuthService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthServiceClient interface {
	SignIn(ctx context.Context, in *SignInRequest, opts ...grpc.CallOption) (*SignInResponse, error)
	Register(ctx context.Context, in *RegistrationRequest, opts ...grpc.CallOption) (*RegistrationResponse, error)
	UpdatePersonalInfo(ctx context.Context, in *UpdatePersonalInfoRequest, opts ...grpc.CallOption) (*UpdatePersonalInfoResponse, error)
	ChangeHostDistinguishedStatus(ctx context.Context, in *ChangeHostDistinguishedStatusRequest, opts ...grpc.CallOption) (*ChangeHostDistinguishedStatusResponse, error)
	DeleteProfile(ctx context.Context, in *DeleteProfileRequest, opts ...grpc.CallOption) (*DeleteProfileResponse, error)
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error)
	FindById(ctx context.Context, in *FindUserByIdRequest, opts ...grpc.CallOption) (*FindUserByIdResponse, error)
	ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*ChangePasswordResponse, error)
	GetHostRatingWithGuestInfo(ctx context.Context, in *GetHostRatingWithGuestInfoRequest, opts ...grpc.CallOption) (*GetHostRatingWithGuestInfoResponse, error)
	ProfileDeletion(ctx context.Context, in *ProfileDeletionRequest, opts ...grpc.CallOption) (*ProfileDeletionResponse, error)
	GetFeaturedHosts(ctx context.Context, in *GetFeaturedHostsRequest, opts ...grpc.CallOption) (*GetFeaturedHostsResponse, error)
}

type authServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthServiceClient(cc grpc.ClientConnInterface) AuthServiceClient {
	return &authServiceClient{cc}
}

func (c *authServiceClient) SignIn(ctx context.Context, in *SignInRequest, opts ...grpc.CallOption) (*SignInResponse, error) {
	out := new(SignInResponse)
	err := c.cc.Invoke(ctx, AuthService_SignIn_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) Register(ctx context.Context, in *RegistrationRequest, opts ...grpc.CallOption) (*RegistrationResponse, error) {
	out := new(RegistrationResponse)
	err := c.cc.Invoke(ctx, AuthService_Register_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) UpdatePersonalInfo(ctx context.Context, in *UpdatePersonalInfoRequest, opts ...grpc.CallOption) (*UpdatePersonalInfoResponse, error) {
	out := new(UpdatePersonalInfoResponse)
	err := c.cc.Invoke(ctx, AuthService_UpdatePersonalInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) ChangeHostDistinguishedStatus(ctx context.Context, in *ChangeHostDistinguishedStatusRequest, opts ...grpc.CallOption) (*ChangeHostDistinguishedStatusResponse, error) {
	out := new(ChangeHostDistinguishedStatusResponse)
	err := c.cc.Invoke(ctx, AuthService_ChangeHostDistinguishedStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) DeleteProfile(ctx context.Context, in *DeleteProfileRequest, opts ...grpc.CallOption) (*DeleteProfileResponse, error) {
	out := new(DeleteProfileResponse)
	err := c.cc.Invoke(ctx, AuthService_DeleteProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error) {
	out := new(GetUserResponse)
	err := c.cc.Invoke(ctx, AuthService_GetUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) FindById(ctx context.Context, in *FindUserByIdRequest, opts ...grpc.CallOption) (*FindUserByIdResponse, error) {
	out := new(FindUserByIdResponse)
	err := c.cc.Invoke(ctx, AuthService_FindById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*ChangePasswordResponse, error) {
	out := new(ChangePasswordResponse)
	err := c.cc.Invoke(ctx, AuthService_ChangePassword_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetHostRatingWithGuestInfo(ctx context.Context, in *GetHostRatingWithGuestInfoRequest, opts ...grpc.CallOption) (*GetHostRatingWithGuestInfoResponse, error) {
	out := new(GetHostRatingWithGuestInfoResponse)
	err := c.cc.Invoke(ctx, AuthService_GetHostRatingWithGuestInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) ProfileDeletion(ctx context.Context, in *ProfileDeletionRequest, opts ...grpc.CallOption) (*ProfileDeletionResponse, error) {
	out := new(ProfileDeletionResponse)
	err := c.cc.Invoke(ctx, AuthService_ProfileDeletion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetFeaturedHosts(ctx context.Context, in *GetFeaturedHostsRequest, opts ...grpc.CallOption) (*GetFeaturedHostsResponse, error) {
	out := new(GetFeaturedHostsResponse)
	err := c.cc.Invoke(ctx, AuthService_GetFeaturedHosts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServiceServer is the server API for AuthService service.
// All implementations must embed UnimplementedAuthServiceServer
// for forward compatibility
type AuthServiceServer interface {
	SignIn(context.Context, *SignInRequest) (*SignInResponse, error)
	Register(context.Context, *RegistrationRequest) (*RegistrationResponse, error)
	UpdatePersonalInfo(context.Context, *UpdatePersonalInfoRequest) (*UpdatePersonalInfoResponse, error)
	ChangeHostDistinguishedStatus(context.Context, *ChangeHostDistinguishedStatusRequest) (*ChangeHostDistinguishedStatusResponse, error)
	DeleteProfile(context.Context, *DeleteProfileRequest) (*DeleteProfileResponse, error)
	GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error)
	FindById(context.Context, *FindUserByIdRequest) (*FindUserByIdResponse, error)
	ChangePassword(context.Context, *ChangePasswordRequest) (*ChangePasswordResponse, error)
	GetHostRatingWithGuestInfo(context.Context, *GetHostRatingWithGuestInfoRequest) (*GetHostRatingWithGuestInfoResponse, error)
	ProfileDeletion(context.Context, *ProfileDeletionRequest) (*ProfileDeletionResponse, error)
	GetFeaturedHosts(context.Context, *GetFeaturedHostsRequest) (*GetFeaturedHostsResponse, error)
	mustEmbedUnimplementedAuthServiceServer()
}

// UnimplementedAuthServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAuthServiceServer struct {
}

func (UnimplementedAuthServiceServer) SignIn(context.Context, *SignInRequest) (*SignInResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignIn not implemented")
}
func (UnimplementedAuthServiceServer) Register(context.Context, *RegistrationRequest) (*RegistrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedAuthServiceServer) UpdatePersonalInfo(context.Context, *UpdatePersonalInfoRequest) (*UpdatePersonalInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePersonalInfo not implemented")
}
func (UnimplementedAuthServiceServer) ChangeHostDistinguishedStatus(context.Context, *ChangeHostDistinguishedStatusRequest) (*ChangeHostDistinguishedStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeHostDistinguishedStatus not implemented")
}
func (UnimplementedAuthServiceServer) DeleteProfile(context.Context, *DeleteProfileRequest) (*DeleteProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProfile not implemented")
}
func (UnimplementedAuthServiceServer) GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedAuthServiceServer) FindById(context.Context, *FindUserByIdRequest) (*FindUserByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindById not implemented")
}
func (UnimplementedAuthServiceServer) ChangePassword(context.Context, *ChangePasswordRequest) (*ChangePasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePassword not implemented")
}
func (UnimplementedAuthServiceServer) GetHostRatingWithGuestInfo(context.Context, *GetHostRatingWithGuestInfoRequest) (*GetHostRatingWithGuestInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHostRatingWithGuestInfo not implemented")
}
func (UnimplementedAuthServiceServer) ProfileDeletion(context.Context, *ProfileDeletionRequest) (*ProfileDeletionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProfileDeletion not implemented")
}
func (UnimplementedAuthServiceServer) GetFeaturedHosts(context.Context, *GetFeaturedHostsRequest) (*GetFeaturedHostsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFeaturedHosts not implemented")
}
func (UnimplementedAuthServiceServer) mustEmbedUnimplementedAuthServiceServer() {}

// UnsafeAuthServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthServiceServer will
// result in compilation errors.
type UnsafeAuthServiceServer interface {
	mustEmbedUnimplementedAuthServiceServer()
}

func RegisterAuthServiceServer(s grpc.ServiceRegistrar, srv AuthServiceServer) {
	s.RegisterService(&AuthService_ServiceDesc, srv)
}

func _AuthService_SignIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignInRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).SignIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_SignIn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).SignIn(ctx, req.(*SignInRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegistrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).Register(ctx, req.(*RegistrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_UpdatePersonalInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePersonalInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).UpdatePersonalInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_UpdatePersonalInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).UpdatePersonalInfo(ctx, req.(*UpdatePersonalInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_ChangeHostDistinguishedStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeHostDistinguishedStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ChangeHostDistinguishedStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_ChangeHostDistinguishedStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ChangeHostDistinguishedStatus(ctx, req.(*ChangeHostDistinguishedStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_DeleteProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).DeleteProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_DeleteProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).DeleteProfile(ctx, req.(*DeleteProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_FindById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindUserByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).FindById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_FindById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).FindById(ctx, req.(*FindUserByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_ChangePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangePasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ChangePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_ChangePassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ChangePassword(ctx, req.(*ChangePasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetHostRatingWithGuestInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHostRatingWithGuestInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetHostRatingWithGuestInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GetHostRatingWithGuestInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetHostRatingWithGuestInfo(ctx, req.(*GetHostRatingWithGuestInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_ProfileDeletion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProfileDeletionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ProfileDeletion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_ProfileDeletion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ProfileDeletion(ctx, req.(*ProfileDeletionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetFeaturedHosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFeaturedHostsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetFeaturedHosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GetFeaturedHosts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetFeaturedHosts(ctx, req.(*GetFeaturedHostsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthService_ServiceDesc is the grpc.ServiceDesc for AuthService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "AuthService",
	HandlerType: (*AuthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SignIn",
			Handler:    _AuthService_SignIn_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _AuthService_Register_Handler,
		},
		{
			MethodName: "UpdatePersonalInfo",
			Handler:    _AuthService_UpdatePersonalInfo_Handler,
		},
		{
			MethodName: "ChangeHostDistinguishedStatus",
			Handler:    _AuthService_ChangeHostDistinguishedStatus_Handler,
		},
		{
			MethodName: "DeleteProfile",
			Handler:    _AuthService_DeleteProfile_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _AuthService_GetUser_Handler,
		},
		{
			MethodName: "FindById",
			Handler:    _AuthService_FindById_Handler,
		},
		{
			MethodName: "ChangePassword",
			Handler:    _AuthService_ChangePassword_Handler,
		},
		{
			MethodName: "GetHostRatingWithGuestInfo",
			Handler:    _AuthService_GetHostRatingWithGuestInfo_Handler,
		},
		{
			MethodName: "ProfileDeletion",
			Handler:    _AuthService_ProfileDeletion_Handler,
		},
		{
			MethodName: "GetFeaturedHosts",
			Handler:    _AuthService_GetFeaturedHosts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gateway_service.proto",
}

const (
	AccomodationService_Create_FullMethodName                           = "/AccomodationService/Create"
	AccomodationService_FindAll_FullMethodName                          = "/AccomodationService/FindAll"
	AccomodationService_FindAllAccommodationIdsByOwnerId_FullMethodName = "/AccomodationService/FindAllAccommodationIdsByOwnerId"
	AccomodationService_DeleteByOwnerId_FullMethodName                  = "/AccomodationService/DeleteByOwnerId"
	AccomodationService_FindById_FullMethodName                         = "/AccomodationService/FindById"
	AccomodationService_GetBookingPrice_FullMethodName                  = "/AccomodationService/GetBookingPrice"
	AccomodationService_UpdatePricing_FullMethodName                    = "/AccomodationService/UpdatePricing"
	AccomodationService_SearchAndFilter_FullMethodName                  = "/AccomodationService/SearchAndFilter"
	AccomodationService_PopulateRecommended_FullMethodName              = "/AccomodationService/PopulateRecommended"
)

// AccomodationServiceClient is the client API for AccomodationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccomodationServiceClient interface {
	Create(ctx context.Context, in *CreateAccomodationRequest, opts ...grpc.CallOption) (*CreateAccomodationResponse, error)
	FindAll(ctx context.Context, in *FindAllAccomodationRequest, opts ...grpc.CallOption) (*FindAllAccomodationResponse, error)
	FindAllAccommodationIdsByOwnerId(ctx context.Context, in *FindAllAccommodationIdsByOwnerIdRequest, opts ...grpc.CallOption) (*FindAllAccommodationIdsByOwnerIdResponse, error)
	DeleteByOwnerId(ctx context.Context, in *DeleteByOwnerIdRequest, opts ...grpc.CallOption) (*DeleteByOwnerIdResponse, error)
	FindById(ctx context.Context, in *FindAccommodationByIdRequest, opts ...grpc.CallOption) (*AccomodationResponse, error)
	GetBookingPrice(ctx context.Context, in *GetBookingPriceRequest, opts ...grpc.CallOption) (*GetBookingPriceResponse, error)
	UpdatePricing(ctx context.Context, in *UpdatePricingRequest, opts ...grpc.CallOption) (*UpdatePricingResponse, error)
	SearchAndFilter(ctx context.Context, in *SearchAndFilterRequest, opts ...grpc.CallOption) (*SearchAndFilterResponse, error)
	PopulateRecommended(ctx context.Context, in *PopulateRecommendedRequest, opts ...grpc.CallOption) (*PopulateRecommendedResponse, error)
}

type accomodationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAccomodationServiceClient(cc grpc.ClientConnInterface) AccomodationServiceClient {
	return &accomodationServiceClient{cc}
}

func (c *accomodationServiceClient) Create(ctx context.Context, in *CreateAccomodationRequest, opts ...grpc.CallOption) (*CreateAccomodationResponse, error) {
	out := new(CreateAccomodationResponse)
	err := c.cc.Invoke(ctx, AccomodationService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accomodationServiceClient) FindAll(ctx context.Context, in *FindAllAccomodationRequest, opts ...grpc.CallOption) (*FindAllAccomodationResponse, error) {
	out := new(FindAllAccomodationResponse)
	err := c.cc.Invoke(ctx, AccomodationService_FindAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accomodationServiceClient) FindAllAccommodationIdsByOwnerId(ctx context.Context, in *FindAllAccommodationIdsByOwnerIdRequest, opts ...grpc.CallOption) (*FindAllAccommodationIdsByOwnerIdResponse, error) {
	out := new(FindAllAccommodationIdsByOwnerIdResponse)
	err := c.cc.Invoke(ctx, AccomodationService_FindAllAccommodationIdsByOwnerId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accomodationServiceClient) DeleteByOwnerId(ctx context.Context, in *DeleteByOwnerIdRequest, opts ...grpc.CallOption) (*DeleteByOwnerIdResponse, error) {
	out := new(DeleteByOwnerIdResponse)
	err := c.cc.Invoke(ctx, AccomodationService_DeleteByOwnerId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accomodationServiceClient) FindById(ctx context.Context, in *FindAccommodationByIdRequest, opts ...grpc.CallOption) (*AccomodationResponse, error) {
	out := new(AccomodationResponse)
	err := c.cc.Invoke(ctx, AccomodationService_FindById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accomodationServiceClient) GetBookingPrice(ctx context.Context, in *GetBookingPriceRequest, opts ...grpc.CallOption) (*GetBookingPriceResponse, error) {
	out := new(GetBookingPriceResponse)
	err := c.cc.Invoke(ctx, AccomodationService_GetBookingPrice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accomodationServiceClient) UpdatePricing(ctx context.Context, in *UpdatePricingRequest, opts ...grpc.CallOption) (*UpdatePricingResponse, error) {
	out := new(UpdatePricingResponse)
	err := c.cc.Invoke(ctx, AccomodationService_UpdatePricing_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accomodationServiceClient) SearchAndFilter(ctx context.Context, in *SearchAndFilterRequest, opts ...grpc.CallOption) (*SearchAndFilterResponse, error) {
	out := new(SearchAndFilterResponse)
	err := c.cc.Invoke(ctx, AccomodationService_SearchAndFilter_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accomodationServiceClient) PopulateRecommended(ctx context.Context, in *PopulateRecommendedRequest, opts ...grpc.CallOption) (*PopulateRecommendedResponse, error) {
	out := new(PopulateRecommendedResponse)
	err := c.cc.Invoke(ctx, AccomodationService_PopulateRecommended_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccomodationServiceServer is the server API for AccomodationService service.
// All implementations must embed UnimplementedAccomodationServiceServer
// for forward compatibility
type AccomodationServiceServer interface {
	Create(context.Context, *CreateAccomodationRequest) (*CreateAccomodationResponse, error)
	FindAll(context.Context, *FindAllAccomodationRequest) (*FindAllAccomodationResponse, error)
	FindAllAccommodationIdsByOwnerId(context.Context, *FindAllAccommodationIdsByOwnerIdRequest) (*FindAllAccommodationIdsByOwnerIdResponse, error)
	DeleteByOwnerId(context.Context, *DeleteByOwnerIdRequest) (*DeleteByOwnerIdResponse, error)
	FindById(context.Context, *FindAccommodationByIdRequest) (*AccomodationResponse, error)
	GetBookingPrice(context.Context, *GetBookingPriceRequest) (*GetBookingPriceResponse, error)
	UpdatePricing(context.Context, *UpdatePricingRequest) (*UpdatePricingResponse, error)
	SearchAndFilter(context.Context, *SearchAndFilterRequest) (*SearchAndFilterResponse, error)
	PopulateRecommended(context.Context, *PopulateRecommendedRequest) (*PopulateRecommendedResponse, error)
	mustEmbedUnimplementedAccomodationServiceServer()
}

// UnimplementedAccomodationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAccomodationServiceServer struct {
}

func (UnimplementedAccomodationServiceServer) Create(context.Context, *CreateAccomodationRequest) (*CreateAccomodationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedAccomodationServiceServer) FindAll(context.Context, *FindAllAccomodationRequest) (*FindAllAccomodationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAll not implemented")
}
func (UnimplementedAccomodationServiceServer) FindAllAccommodationIdsByOwnerId(context.Context, *FindAllAccommodationIdsByOwnerIdRequest) (*FindAllAccommodationIdsByOwnerIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllAccommodationIdsByOwnerId not implemented")
}
func (UnimplementedAccomodationServiceServer) DeleteByOwnerId(context.Context, *DeleteByOwnerIdRequest) (*DeleteByOwnerIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteByOwnerId not implemented")
}
func (UnimplementedAccomodationServiceServer) FindById(context.Context, *FindAccommodationByIdRequest) (*AccomodationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindById not implemented")
}
func (UnimplementedAccomodationServiceServer) GetBookingPrice(context.Context, *GetBookingPriceRequest) (*GetBookingPriceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBookingPrice not implemented")
}
func (UnimplementedAccomodationServiceServer) UpdatePricing(context.Context, *UpdatePricingRequest) (*UpdatePricingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePricing not implemented")
}
func (UnimplementedAccomodationServiceServer) SearchAndFilter(context.Context, *SearchAndFilterRequest) (*SearchAndFilterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchAndFilter not implemented")
}
func (UnimplementedAccomodationServiceServer) PopulateRecommended(context.Context, *PopulateRecommendedRequest) (*PopulateRecommendedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PopulateRecommended not implemented")
}
func (UnimplementedAccomodationServiceServer) mustEmbedUnimplementedAccomodationServiceServer() {}

// UnsafeAccomodationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccomodationServiceServer will
// result in compilation errors.
type UnsafeAccomodationServiceServer interface {
	mustEmbedUnimplementedAccomodationServiceServer()
}

func RegisterAccomodationServiceServer(s grpc.ServiceRegistrar, srv AccomodationServiceServer) {
	s.RegisterService(&AccomodationService_ServiceDesc, srv)
}

func _AccomodationService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccomodationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccomodationServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccomodationService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccomodationServiceServer).Create(ctx, req.(*CreateAccomodationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccomodationService_FindAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllAccomodationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccomodationServiceServer).FindAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccomodationService_FindAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccomodationServiceServer).FindAll(ctx, req.(*FindAllAccomodationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccomodationService_FindAllAccommodationIdsByOwnerId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllAccommodationIdsByOwnerIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccomodationServiceServer).FindAllAccommodationIdsByOwnerId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccomodationService_FindAllAccommodationIdsByOwnerId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccomodationServiceServer).FindAllAccommodationIdsByOwnerId(ctx, req.(*FindAllAccommodationIdsByOwnerIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccomodationService_DeleteByOwnerId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteByOwnerIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccomodationServiceServer).DeleteByOwnerId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccomodationService_DeleteByOwnerId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccomodationServiceServer).DeleteByOwnerId(ctx, req.(*DeleteByOwnerIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccomodationService_FindById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAccommodationByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccomodationServiceServer).FindById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccomodationService_FindById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccomodationServiceServer).FindById(ctx, req.(*FindAccommodationByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccomodationService_GetBookingPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBookingPriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccomodationServiceServer).GetBookingPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccomodationService_GetBookingPrice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccomodationServiceServer).GetBookingPrice(ctx, req.(*GetBookingPriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccomodationService_UpdatePricing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePricingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccomodationServiceServer).UpdatePricing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccomodationService_UpdatePricing_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccomodationServiceServer).UpdatePricing(ctx, req.(*UpdatePricingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccomodationService_SearchAndFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchAndFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccomodationServiceServer).SearchAndFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccomodationService_SearchAndFilter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccomodationServiceServer).SearchAndFilter(ctx, req.(*SearchAndFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccomodationService_PopulateRecommended_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PopulateRecommendedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccomodationServiceServer).PopulateRecommended(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccomodationService_PopulateRecommended_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccomodationServiceServer).PopulateRecommended(ctx, req.(*PopulateRecommendedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AccomodationService_ServiceDesc is the grpc.ServiceDesc for AccomodationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AccomodationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "AccomodationService",
	HandlerType: (*AccomodationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _AccomodationService_Create_Handler,
		},
		{
			MethodName: "FindAll",
			Handler:    _AccomodationService_FindAll_Handler,
		},
		{
			MethodName: "FindAllAccommodationIdsByOwnerId",
			Handler:    _AccomodationService_FindAllAccommodationIdsByOwnerId_Handler,
		},
		{
			MethodName: "DeleteByOwnerId",
			Handler:    _AccomodationService_DeleteByOwnerId_Handler,
		},
		{
			MethodName: "FindById",
			Handler:    _AccomodationService_FindById_Handler,
		},
		{
			MethodName: "GetBookingPrice",
			Handler:    _AccomodationService_GetBookingPrice_Handler,
		},
		{
			MethodName: "UpdatePricing",
			Handler:    _AccomodationService_UpdatePricing_Handler,
		},
		{
			MethodName: "SearchAndFilter",
			Handler:    _AccomodationService_SearchAndFilter_Handler,
		},
		{
			MethodName: "PopulateRecommended",
			Handler:    _AccomodationService_PopulateRecommended_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gateway_service.proto",
}

const (
	ReservationService_Delete_FullMethodName                                     = "/ReservationService/Delete"
	ReservationService_Create_FullMethodName                                     = "/ReservationService/Create"
	ReservationService_Confirm_FullMethodName                                    = "/ReservationService/Confirm"
	ReservationService_Reject_FullMethodName                                     = "/ReservationService/Reject"
	ReservationService_CancelReservation_FullMethodName                          = "/ReservationService/CancelReservation"
	ReservationService_FindAllReservedAccommodations_FullMethodName              = "/ReservationService/FindAllReservedAccommodations"
	ReservationService_CheckActiveReservationsForGuest_FullMethodName            = "/ReservationService/CheckActiveReservationsForGuest"
	ReservationService_CheckActiveReservationsForAccommodations_FullMethodName   = "/ReservationService/CheckActiveReservationsForAccommodations"
	ReservationService_FindAllByAccommodationId_FullMethodName                   = "/ReservationService/FindAllByAccommodationId"
	ReservationService_IsAccommodationAvailable_FullMethodName                   = "/ReservationService/IsAccommodationAvailable"
	ReservationService_FindAllByBuyerId_FullMethodName                           = "/ReservationService/FindAllByBuyerId"
	ReservationService_FindNumberOfBuyersCancellations_FullMethodName            = "/ReservationService/FindNumberOfBuyersCancellations"
	ReservationService_UpdateReservationRating_FullMethodName                    = "/ReservationService/UpdateReservationRating"
	ReservationService_CheckIfGuestHasReservationInAccommodations_FullMethodName = "/ReservationService/CheckIfGuestHasReservationInAccommodations"
)

// ReservationServiceClient is the client API for ReservationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReservationServiceClient interface {
	Delete(ctx context.Context, in *ReservationId, opts ...grpc.CallOption) (*DeleteReservationResponse, error)
	Create(ctx context.Context, in *CreateReservationRequest, opts ...grpc.CallOption) (*ReservationId, error)
	Confirm(ctx context.Context, in *ReservationId, opts ...grpc.CallOption) (*ReservationResponse, error)
	Reject(ctx context.Context, in *ReservationId, opts ...grpc.CallOption) (*ReservationResponse, error)
	CancelReservation(ctx context.Context, in *CancelReservationRequest, opts ...grpc.CallOption) (*ReservationResponse, error)
	FindAllReservedAccommodations(ctx context.Context, in *FindAllReservedAccommodationsRequest, opts ...grpc.CallOption) (*FindAllReservedAccommodationsResponse, error)
	CheckActiveReservationsForGuest(ctx context.Context, in *CheckActiveReservationsForGuestRequest, opts ...grpc.CallOption) (*CheckActiveReservationsForGuestResponse, error)
	CheckActiveReservationsForAccommodations(ctx context.Context, in *CheckActiveReservationsForAccommodationsRequest, opts ...grpc.CallOption) (*CheckActiveReservationsForAccommodationsResponse, error)
	FindAllByAccommodationId(ctx context.Context, in *FindAllReservationsByAccommodationIdRequest, opts ...grpc.CallOption) (*FindAllReservationsByAccommodationIdResponse, error)
	IsAccommodationAvailable(ctx context.Context, in *IsAccommodationAvailableRequest, opts ...grpc.CallOption) (*IsAccommodationAvailableResponse, error)
	FindAllByBuyerId(ctx context.Context, in *FindAllReservationsByBuyerIdRequest, opts ...grpc.CallOption) (*FindAllReservationsByBuyerIdResponse, error)
	FindNumberOfBuyersCancellations(ctx context.Context, in *NumberOfCancellationRequest, opts ...grpc.CallOption) (*NumberOfCancellationResponse, error)
	UpdateReservationRating(ctx context.Context, in *UpdateReservationRatingRequest, opts ...grpc.CallOption) (*UpdateReservationRatingResponse, error)
	CheckIfGuestHasReservationInAccommodations(ctx context.Context, in *CheckIfGuestHasReservationInAccommodationsRequest, opts ...grpc.CallOption) (*CheckIfGuestHasReservationInAccommodationsResponse, error)
}

type reservationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewReservationServiceClient(cc grpc.ClientConnInterface) ReservationServiceClient {
	return &reservationServiceClient{cc}
}

func (c *reservationServiceClient) Delete(ctx context.Context, in *ReservationId, opts ...grpc.CallOption) (*DeleteReservationResponse, error) {
	out := new(DeleteReservationResponse)
	err := c.cc.Invoke(ctx, ReservationService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reservationServiceClient) Create(ctx context.Context, in *CreateReservationRequest, opts ...grpc.CallOption) (*ReservationId, error) {
	out := new(ReservationId)
	err := c.cc.Invoke(ctx, ReservationService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reservationServiceClient) Confirm(ctx context.Context, in *ReservationId, opts ...grpc.CallOption) (*ReservationResponse, error) {
	out := new(ReservationResponse)
	err := c.cc.Invoke(ctx, ReservationService_Confirm_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reservationServiceClient) Reject(ctx context.Context, in *ReservationId, opts ...grpc.CallOption) (*ReservationResponse, error) {
	out := new(ReservationResponse)
	err := c.cc.Invoke(ctx, ReservationService_Reject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reservationServiceClient) CancelReservation(ctx context.Context, in *CancelReservationRequest, opts ...grpc.CallOption) (*ReservationResponse, error) {
	out := new(ReservationResponse)
	err := c.cc.Invoke(ctx, ReservationService_CancelReservation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reservationServiceClient) FindAllReservedAccommodations(ctx context.Context, in *FindAllReservedAccommodationsRequest, opts ...grpc.CallOption) (*FindAllReservedAccommodationsResponse, error) {
	out := new(FindAllReservedAccommodationsResponse)
	err := c.cc.Invoke(ctx, ReservationService_FindAllReservedAccommodations_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reservationServiceClient) CheckActiveReservationsForGuest(ctx context.Context, in *CheckActiveReservationsForGuestRequest, opts ...grpc.CallOption) (*CheckActiveReservationsForGuestResponse, error) {
	out := new(CheckActiveReservationsForGuestResponse)
	err := c.cc.Invoke(ctx, ReservationService_CheckActiveReservationsForGuest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reservationServiceClient) CheckActiveReservationsForAccommodations(ctx context.Context, in *CheckActiveReservationsForAccommodationsRequest, opts ...grpc.CallOption) (*CheckActiveReservationsForAccommodationsResponse, error) {
	out := new(CheckActiveReservationsForAccommodationsResponse)
	err := c.cc.Invoke(ctx, ReservationService_CheckActiveReservationsForAccommodations_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reservationServiceClient) FindAllByAccommodationId(ctx context.Context, in *FindAllReservationsByAccommodationIdRequest, opts ...grpc.CallOption) (*FindAllReservationsByAccommodationIdResponse, error) {
	out := new(FindAllReservationsByAccommodationIdResponse)
	err := c.cc.Invoke(ctx, ReservationService_FindAllByAccommodationId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reservationServiceClient) IsAccommodationAvailable(ctx context.Context, in *IsAccommodationAvailableRequest, opts ...grpc.CallOption) (*IsAccommodationAvailableResponse, error) {
	out := new(IsAccommodationAvailableResponse)
	err := c.cc.Invoke(ctx, ReservationService_IsAccommodationAvailable_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reservationServiceClient) FindAllByBuyerId(ctx context.Context, in *FindAllReservationsByBuyerIdRequest, opts ...grpc.CallOption) (*FindAllReservationsByBuyerIdResponse, error) {
	out := new(FindAllReservationsByBuyerIdResponse)
	err := c.cc.Invoke(ctx, ReservationService_FindAllByBuyerId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reservationServiceClient) FindNumberOfBuyersCancellations(ctx context.Context, in *NumberOfCancellationRequest, opts ...grpc.CallOption) (*NumberOfCancellationResponse, error) {
	out := new(NumberOfCancellationResponse)
	err := c.cc.Invoke(ctx, ReservationService_FindNumberOfBuyersCancellations_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reservationServiceClient) UpdateReservationRating(ctx context.Context, in *UpdateReservationRatingRequest, opts ...grpc.CallOption) (*UpdateReservationRatingResponse, error) {
	out := new(UpdateReservationRatingResponse)
	err := c.cc.Invoke(ctx, ReservationService_UpdateReservationRating_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reservationServiceClient) CheckIfGuestHasReservationInAccommodations(ctx context.Context, in *CheckIfGuestHasReservationInAccommodationsRequest, opts ...grpc.CallOption) (*CheckIfGuestHasReservationInAccommodationsResponse, error) {
	out := new(CheckIfGuestHasReservationInAccommodationsResponse)
	err := c.cc.Invoke(ctx, ReservationService_CheckIfGuestHasReservationInAccommodations_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReservationServiceServer is the server API for ReservationService service.
// All implementations must embed UnimplementedReservationServiceServer
// for forward compatibility
type ReservationServiceServer interface {
	Delete(context.Context, *ReservationId) (*DeleteReservationResponse, error)
	Create(context.Context, *CreateReservationRequest) (*ReservationId, error)
	Confirm(context.Context, *ReservationId) (*ReservationResponse, error)
	Reject(context.Context, *ReservationId) (*ReservationResponse, error)
	CancelReservation(context.Context, *CancelReservationRequest) (*ReservationResponse, error)
	FindAllReservedAccommodations(context.Context, *FindAllReservedAccommodationsRequest) (*FindAllReservedAccommodationsResponse, error)
	CheckActiveReservationsForGuest(context.Context, *CheckActiveReservationsForGuestRequest) (*CheckActiveReservationsForGuestResponse, error)
	CheckActiveReservationsForAccommodations(context.Context, *CheckActiveReservationsForAccommodationsRequest) (*CheckActiveReservationsForAccommodationsResponse, error)
	FindAllByAccommodationId(context.Context, *FindAllReservationsByAccommodationIdRequest) (*FindAllReservationsByAccommodationIdResponse, error)
	IsAccommodationAvailable(context.Context, *IsAccommodationAvailableRequest) (*IsAccommodationAvailableResponse, error)
	FindAllByBuyerId(context.Context, *FindAllReservationsByBuyerIdRequest) (*FindAllReservationsByBuyerIdResponse, error)
	FindNumberOfBuyersCancellations(context.Context, *NumberOfCancellationRequest) (*NumberOfCancellationResponse, error)
	UpdateReservationRating(context.Context, *UpdateReservationRatingRequest) (*UpdateReservationRatingResponse, error)
	CheckIfGuestHasReservationInAccommodations(context.Context, *CheckIfGuestHasReservationInAccommodationsRequest) (*CheckIfGuestHasReservationInAccommodationsResponse, error)
	mustEmbedUnimplementedReservationServiceServer()
}

// UnimplementedReservationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedReservationServiceServer struct {
}

func (UnimplementedReservationServiceServer) Delete(context.Context, *ReservationId) (*DeleteReservationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedReservationServiceServer) Create(context.Context, *CreateReservationRequest) (*ReservationId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedReservationServiceServer) Confirm(context.Context, *ReservationId) (*ReservationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Confirm not implemented")
}
func (UnimplementedReservationServiceServer) Reject(context.Context, *ReservationId) (*ReservationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reject not implemented")
}
func (UnimplementedReservationServiceServer) CancelReservation(context.Context, *CancelReservationRequest) (*ReservationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelReservation not implemented")
}
func (UnimplementedReservationServiceServer) FindAllReservedAccommodations(context.Context, *FindAllReservedAccommodationsRequest) (*FindAllReservedAccommodationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllReservedAccommodations not implemented")
}
func (UnimplementedReservationServiceServer) CheckActiveReservationsForGuest(context.Context, *CheckActiveReservationsForGuestRequest) (*CheckActiveReservationsForGuestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckActiveReservationsForGuest not implemented")
}
func (UnimplementedReservationServiceServer) CheckActiveReservationsForAccommodations(context.Context, *CheckActiveReservationsForAccommodationsRequest) (*CheckActiveReservationsForAccommodationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckActiveReservationsForAccommodations not implemented")
}
func (UnimplementedReservationServiceServer) FindAllByAccommodationId(context.Context, *FindAllReservationsByAccommodationIdRequest) (*FindAllReservationsByAccommodationIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllByAccommodationId not implemented")
}
func (UnimplementedReservationServiceServer) IsAccommodationAvailable(context.Context, *IsAccommodationAvailableRequest) (*IsAccommodationAvailableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsAccommodationAvailable not implemented")
}
func (UnimplementedReservationServiceServer) FindAllByBuyerId(context.Context, *FindAllReservationsByBuyerIdRequest) (*FindAllReservationsByBuyerIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllByBuyerId not implemented")
}
func (UnimplementedReservationServiceServer) FindNumberOfBuyersCancellations(context.Context, *NumberOfCancellationRequest) (*NumberOfCancellationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindNumberOfBuyersCancellations not implemented")
}
func (UnimplementedReservationServiceServer) UpdateReservationRating(context.Context, *UpdateReservationRatingRequest) (*UpdateReservationRatingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateReservationRating not implemented")
}
func (UnimplementedReservationServiceServer) CheckIfGuestHasReservationInAccommodations(context.Context, *CheckIfGuestHasReservationInAccommodationsRequest) (*CheckIfGuestHasReservationInAccommodationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckIfGuestHasReservationInAccommodations not implemented")
}
func (UnimplementedReservationServiceServer) mustEmbedUnimplementedReservationServiceServer() {}

// UnsafeReservationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReservationServiceServer will
// result in compilation errors.
type UnsafeReservationServiceServer interface {
	mustEmbedUnimplementedReservationServiceServer()
}

func RegisterReservationServiceServer(s grpc.ServiceRegistrar, srv ReservationServiceServer) {
	s.RegisterService(&ReservationService_ServiceDesc, srv)
}

func _ReservationService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReservationId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReservationServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReservationService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReservationServiceServer).Delete(ctx, req.(*ReservationId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReservationService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReservationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReservationServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReservationService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReservationServiceServer).Create(ctx, req.(*CreateReservationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReservationService_Confirm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReservationId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReservationServiceServer).Confirm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReservationService_Confirm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReservationServiceServer).Confirm(ctx, req.(*ReservationId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReservationService_Reject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReservationId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReservationServiceServer).Reject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReservationService_Reject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReservationServiceServer).Reject(ctx, req.(*ReservationId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReservationService_CancelReservation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelReservationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReservationServiceServer).CancelReservation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReservationService_CancelReservation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReservationServiceServer).CancelReservation(ctx, req.(*CancelReservationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReservationService_FindAllReservedAccommodations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllReservedAccommodationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReservationServiceServer).FindAllReservedAccommodations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReservationService_FindAllReservedAccommodations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReservationServiceServer).FindAllReservedAccommodations(ctx, req.(*FindAllReservedAccommodationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReservationService_CheckActiveReservationsForGuest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckActiveReservationsForGuestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReservationServiceServer).CheckActiveReservationsForGuest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReservationService_CheckActiveReservationsForGuest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReservationServiceServer).CheckActiveReservationsForGuest(ctx, req.(*CheckActiveReservationsForGuestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReservationService_CheckActiveReservationsForAccommodations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckActiveReservationsForAccommodationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReservationServiceServer).CheckActiveReservationsForAccommodations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReservationService_CheckActiveReservationsForAccommodations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReservationServiceServer).CheckActiveReservationsForAccommodations(ctx, req.(*CheckActiveReservationsForAccommodationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReservationService_FindAllByAccommodationId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllReservationsByAccommodationIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReservationServiceServer).FindAllByAccommodationId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReservationService_FindAllByAccommodationId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReservationServiceServer).FindAllByAccommodationId(ctx, req.(*FindAllReservationsByAccommodationIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReservationService_IsAccommodationAvailable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsAccommodationAvailableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReservationServiceServer).IsAccommodationAvailable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReservationService_IsAccommodationAvailable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReservationServiceServer).IsAccommodationAvailable(ctx, req.(*IsAccommodationAvailableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReservationService_FindAllByBuyerId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllReservationsByBuyerIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReservationServiceServer).FindAllByBuyerId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReservationService_FindAllByBuyerId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReservationServiceServer).FindAllByBuyerId(ctx, req.(*FindAllReservationsByBuyerIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReservationService_FindNumberOfBuyersCancellations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NumberOfCancellationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReservationServiceServer).FindNumberOfBuyersCancellations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReservationService_FindNumberOfBuyersCancellations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReservationServiceServer).FindNumberOfBuyersCancellations(ctx, req.(*NumberOfCancellationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReservationService_UpdateReservationRating_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateReservationRatingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReservationServiceServer).UpdateReservationRating(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReservationService_UpdateReservationRating_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReservationServiceServer).UpdateReservationRating(ctx, req.(*UpdateReservationRatingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReservationService_CheckIfGuestHasReservationInAccommodations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckIfGuestHasReservationInAccommodationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReservationServiceServer).CheckIfGuestHasReservationInAccommodations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReservationService_CheckIfGuestHasReservationInAccommodations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReservationServiceServer).CheckIfGuestHasReservationInAccommodations(ctx, req.(*CheckIfGuestHasReservationInAccommodationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ReservationService_ServiceDesc is the grpc.ServiceDesc for ReservationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReservationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ReservationService",
	HandlerType: (*ReservationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Delete",
			Handler:    _ReservationService_Delete_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _ReservationService_Create_Handler,
		},
		{
			MethodName: "Confirm",
			Handler:    _ReservationService_Confirm_Handler,
		},
		{
			MethodName: "Reject",
			Handler:    _ReservationService_Reject_Handler,
		},
		{
			MethodName: "CancelReservation",
			Handler:    _ReservationService_CancelReservation_Handler,
		},
		{
			MethodName: "FindAllReservedAccommodations",
			Handler:    _ReservationService_FindAllReservedAccommodations_Handler,
		},
		{
			MethodName: "CheckActiveReservationsForGuest",
			Handler:    _ReservationService_CheckActiveReservationsForGuest_Handler,
		},
		{
			MethodName: "CheckActiveReservationsForAccommodations",
			Handler:    _ReservationService_CheckActiveReservationsForAccommodations_Handler,
		},
		{
			MethodName: "FindAllByAccommodationId",
			Handler:    _ReservationService_FindAllByAccommodationId_Handler,
		},
		{
			MethodName: "IsAccommodationAvailable",
			Handler:    _ReservationService_IsAccommodationAvailable_Handler,
		},
		{
			MethodName: "FindAllByBuyerId",
			Handler:    _ReservationService_FindAllByBuyerId_Handler,
		},
		{
			MethodName: "FindNumberOfBuyersCancellations",
			Handler:    _ReservationService_FindNumberOfBuyersCancellations_Handler,
		},
		{
			MethodName: "UpdateReservationRating",
			Handler:    _ReservationService_UpdateReservationRating_Handler,
		},
		{
			MethodName: "CheckIfGuestHasReservationInAccommodations",
			Handler:    _ReservationService_CheckIfGuestHasReservationInAccommodations_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gateway_service.proto",
}

const (
	RatingService_RateAccommodation_FullMethodName             = "/RatingService/RateAccommodation"
	RatingService_DeleteAccommodationRating_FullMethodName     = "/RatingService/DeleteAccommodationRating"
	RatingService_UpdateAccommodationRating_FullMethodName     = "/RatingService/UpdateAccommodationRating"
	RatingService_GetAllAccommodationRatings_FullMethodName    = "/RatingService/GetAllAccommodationRatings"
	RatingService_GetAverageAccommodationRating_FullMethodName = "/RatingService/GetAverageAccommodationRating"
	RatingService_FindAccommodationRatingById_FullMethodName   = "/RatingService/FindAccommodationRatingById"
	RatingService_RateHost_FullMethodName                      = "/RatingService/RateHost"
	RatingService_UpdateHostRating_FullMethodName              = "/RatingService/UpdateHostRating"
	RatingService_DeleteHostRating_FullMethodName              = "/RatingService/DeleteHostRating"
	RatingService_GetHostRatings_FullMethodName                = "/RatingService/GetHostRatings"
	RatingService_GetAverageHostRating_FullMethodName          = "/RatingService/GetAverageHostRating"
)

// RatingServiceClient is the client API for RatingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RatingServiceClient interface {
	RateAccommodation(ctx context.Context, in *RateAccommodationRequest, opts ...grpc.CallOption) (*RateAccommodationResponse, error)
	DeleteAccommodationRating(ctx context.Context, in *DeleteAccommodationRatingRequest, opts ...grpc.CallOption) (*DeleteAccommodationRatingResponse, error)
	UpdateAccommodationRating(ctx context.Context, in *UpdateAccommodationRatingRequest, opts ...grpc.CallOption) (*UpdateAccommodationRatingResponse, error)
	GetAllAccommodationRatings(ctx context.Context, in *GetAllAccommodationRatingsRequest, opts ...grpc.CallOption) (*GetAllAccommodationRatingsResponse, error)
	GetAverageAccommodationRating(ctx context.Context, in *GetAverageAccommodationRatingRequest, opts ...grpc.CallOption) (*GetAverageAccommodationRatingResponse, error)
	FindAccommodationRatingById(ctx context.Context, in *FindAccommodationRatingByIdRequest, opts ...grpc.CallOption) (*FindAccommodationRatingByIdResponse, error)
	RateHost(ctx context.Context, in *RateHostRequest, opts ...grpc.CallOption) (*RateHostResponse, error)
	UpdateHostRating(ctx context.Context, in *UpdateHostRatingRequest, opts ...grpc.CallOption) (*UpdateHostRatingResponse, error)
	DeleteHostRating(ctx context.Context, in *DeleteHostRatingRequest, opts ...grpc.CallOption) (*DeleteHostRatingResponse, error)
	GetHostRatings(ctx context.Context, in *GetHostRatingsRequest, opts ...grpc.CallOption) (*GetHostRatingsResponse, error)
	GetAverageHostRating(ctx context.Context, in *GetAverageHostRatingRequest, opts ...grpc.CallOption) (*GetAverageHostRatingResponse, error)
}

type ratingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRatingServiceClient(cc grpc.ClientConnInterface) RatingServiceClient {
	return &ratingServiceClient{cc}
}

func (c *ratingServiceClient) RateAccommodation(ctx context.Context, in *RateAccommodationRequest, opts ...grpc.CallOption) (*RateAccommodationResponse, error) {
	out := new(RateAccommodationResponse)
	err := c.cc.Invoke(ctx, RatingService_RateAccommodation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ratingServiceClient) DeleteAccommodationRating(ctx context.Context, in *DeleteAccommodationRatingRequest, opts ...grpc.CallOption) (*DeleteAccommodationRatingResponse, error) {
	out := new(DeleteAccommodationRatingResponse)
	err := c.cc.Invoke(ctx, RatingService_DeleteAccommodationRating_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ratingServiceClient) UpdateAccommodationRating(ctx context.Context, in *UpdateAccommodationRatingRequest, opts ...grpc.CallOption) (*UpdateAccommodationRatingResponse, error) {
	out := new(UpdateAccommodationRatingResponse)
	err := c.cc.Invoke(ctx, RatingService_UpdateAccommodationRating_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ratingServiceClient) GetAllAccommodationRatings(ctx context.Context, in *GetAllAccommodationRatingsRequest, opts ...grpc.CallOption) (*GetAllAccommodationRatingsResponse, error) {
	out := new(GetAllAccommodationRatingsResponse)
	err := c.cc.Invoke(ctx, RatingService_GetAllAccommodationRatings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ratingServiceClient) GetAverageAccommodationRating(ctx context.Context, in *GetAverageAccommodationRatingRequest, opts ...grpc.CallOption) (*GetAverageAccommodationRatingResponse, error) {
	out := new(GetAverageAccommodationRatingResponse)
	err := c.cc.Invoke(ctx, RatingService_GetAverageAccommodationRating_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ratingServiceClient) FindAccommodationRatingById(ctx context.Context, in *FindAccommodationRatingByIdRequest, opts ...grpc.CallOption) (*FindAccommodationRatingByIdResponse, error) {
	out := new(FindAccommodationRatingByIdResponse)
	err := c.cc.Invoke(ctx, RatingService_FindAccommodationRatingById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ratingServiceClient) RateHost(ctx context.Context, in *RateHostRequest, opts ...grpc.CallOption) (*RateHostResponse, error) {
	out := new(RateHostResponse)
	err := c.cc.Invoke(ctx, RatingService_RateHost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ratingServiceClient) UpdateHostRating(ctx context.Context, in *UpdateHostRatingRequest, opts ...grpc.CallOption) (*UpdateHostRatingResponse, error) {
	out := new(UpdateHostRatingResponse)
	err := c.cc.Invoke(ctx, RatingService_UpdateHostRating_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ratingServiceClient) DeleteHostRating(ctx context.Context, in *DeleteHostRatingRequest, opts ...grpc.CallOption) (*DeleteHostRatingResponse, error) {
	out := new(DeleteHostRatingResponse)
	err := c.cc.Invoke(ctx, RatingService_DeleteHostRating_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ratingServiceClient) GetHostRatings(ctx context.Context, in *GetHostRatingsRequest, opts ...grpc.CallOption) (*GetHostRatingsResponse, error) {
	out := new(GetHostRatingsResponse)
	err := c.cc.Invoke(ctx, RatingService_GetHostRatings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ratingServiceClient) GetAverageHostRating(ctx context.Context, in *GetAverageHostRatingRequest, opts ...grpc.CallOption) (*GetAverageHostRatingResponse, error) {
	out := new(GetAverageHostRatingResponse)
	err := c.cc.Invoke(ctx, RatingService_GetAverageHostRating_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RatingServiceServer is the server API for RatingService service.
// All implementations must embed UnimplementedRatingServiceServer
// for forward compatibility
type RatingServiceServer interface {
	RateAccommodation(context.Context, *RateAccommodationRequest) (*RateAccommodationResponse, error)
	DeleteAccommodationRating(context.Context, *DeleteAccommodationRatingRequest) (*DeleteAccommodationRatingResponse, error)
	UpdateAccommodationRating(context.Context, *UpdateAccommodationRatingRequest) (*UpdateAccommodationRatingResponse, error)
	GetAllAccommodationRatings(context.Context, *GetAllAccommodationRatingsRequest) (*GetAllAccommodationRatingsResponse, error)
	GetAverageAccommodationRating(context.Context, *GetAverageAccommodationRatingRequest) (*GetAverageAccommodationRatingResponse, error)
	FindAccommodationRatingById(context.Context, *FindAccommodationRatingByIdRequest) (*FindAccommodationRatingByIdResponse, error)
	RateHost(context.Context, *RateHostRequest) (*RateHostResponse, error)
	UpdateHostRating(context.Context, *UpdateHostRatingRequest) (*UpdateHostRatingResponse, error)
	DeleteHostRating(context.Context, *DeleteHostRatingRequest) (*DeleteHostRatingResponse, error)
	GetHostRatings(context.Context, *GetHostRatingsRequest) (*GetHostRatingsResponse, error)
	GetAverageHostRating(context.Context, *GetAverageHostRatingRequest) (*GetAverageHostRatingResponse, error)
	mustEmbedUnimplementedRatingServiceServer()
}

// UnimplementedRatingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRatingServiceServer struct {
}

func (UnimplementedRatingServiceServer) RateAccommodation(context.Context, *RateAccommodationRequest) (*RateAccommodationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RateAccommodation not implemented")
}
func (UnimplementedRatingServiceServer) DeleteAccommodationRating(context.Context, *DeleteAccommodationRatingRequest) (*DeleteAccommodationRatingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAccommodationRating not implemented")
}
func (UnimplementedRatingServiceServer) UpdateAccommodationRating(context.Context, *UpdateAccommodationRatingRequest) (*UpdateAccommodationRatingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAccommodationRating not implemented")
}
func (UnimplementedRatingServiceServer) GetAllAccommodationRatings(context.Context, *GetAllAccommodationRatingsRequest) (*GetAllAccommodationRatingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllAccommodationRatings not implemented")
}
func (UnimplementedRatingServiceServer) GetAverageAccommodationRating(context.Context, *GetAverageAccommodationRatingRequest) (*GetAverageAccommodationRatingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAverageAccommodationRating not implemented")
}
func (UnimplementedRatingServiceServer) FindAccommodationRatingById(context.Context, *FindAccommodationRatingByIdRequest) (*FindAccommodationRatingByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAccommodationRatingById not implemented")
}
func (UnimplementedRatingServiceServer) RateHost(context.Context, *RateHostRequest) (*RateHostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RateHost not implemented")
}
func (UnimplementedRatingServiceServer) UpdateHostRating(context.Context, *UpdateHostRatingRequest) (*UpdateHostRatingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHostRating not implemented")
}
func (UnimplementedRatingServiceServer) DeleteHostRating(context.Context, *DeleteHostRatingRequest) (*DeleteHostRatingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteHostRating not implemented")
}
func (UnimplementedRatingServiceServer) GetHostRatings(context.Context, *GetHostRatingsRequest) (*GetHostRatingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHostRatings not implemented")
}
func (UnimplementedRatingServiceServer) GetAverageHostRating(context.Context, *GetAverageHostRatingRequest) (*GetAverageHostRatingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAverageHostRating not implemented")
}
func (UnimplementedRatingServiceServer) mustEmbedUnimplementedRatingServiceServer() {}

// UnsafeRatingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RatingServiceServer will
// result in compilation errors.
type UnsafeRatingServiceServer interface {
	mustEmbedUnimplementedRatingServiceServer()
}

func RegisterRatingServiceServer(s grpc.ServiceRegistrar, srv RatingServiceServer) {
	s.RegisterService(&RatingService_ServiceDesc, srv)
}

func _RatingService_RateAccommodation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RateAccommodationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RatingServiceServer).RateAccommodation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RatingService_RateAccommodation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RatingServiceServer).RateAccommodation(ctx, req.(*RateAccommodationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RatingService_DeleteAccommodationRating_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAccommodationRatingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RatingServiceServer).DeleteAccommodationRating(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RatingService_DeleteAccommodationRating_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RatingServiceServer).DeleteAccommodationRating(ctx, req.(*DeleteAccommodationRatingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RatingService_UpdateAccommodationRating_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAccommodationRatingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RatingServiceServer).UpdateAccommodationRating(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RatingService_UpdateAccommodationRating_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RatingServiceServer).UpdateAccommodationRating(ctx, req.(*UpdateAccommodationRatingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RatingService_GetAllAccommodationRatings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllAccommodationRatingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RatingServiceServer).GetAllAccommodationRatings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RatingService_GetAllAccommodationRatings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RatingServiceServer).GetAllAccommodationRatings(ctx, req.(*GetAllAccommodationRatingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RatingService_GetAverageAccommodationRating_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAverageAccommodationRatingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RatingServiceServer).GetAverageAccommodationRating(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RatingService_GetAverageAccommodationRating_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RatingServiceServer).GetAverageAccommodationRating(ctx, req.(*GetAverageAccommodationRatingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RatingService_FindAccommodationRatingById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAccommodationRatingByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RatingServiceServer).FindAccommodationRatingById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RatingService_FindAccommodationRatingById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RatingServiceServer).FindAccommodationRatingById(ctx, req.(*FindAccommodationRatingByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RatingService_RateHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RateHostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RatingServiceServer).RateHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RatingService_RateHost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RatingServiceServer).RateHost(ctx, req.(*RateHostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RatingService_UpdateHostRating_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHostRatingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RatingServiceServer).UpdateHostRating(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RatingService_UpdateHostRating_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RatingServiceServer).UpdateHostRating(ctx, req.(*UpdateHostRatingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RatingService_DeleteHostRating_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteHostRatingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RatingServiceServer).DeleteHostRating(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RatingService_DeleteHostRating_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RatingServiceServer).DeleteHostRating(ctx, req.(*DeleteHostRatingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RatingService_GetHostRatings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHostRatingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RatingServiceServer).GetHostRatings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RatingService_GetHostRatings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RatingServiceServer).GetHostRatings(ctx, req.(*GetHostRatingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RatingService_GetAverageHostRating_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAverageHostRatingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RatingServiceServer).GetAverageHostRating(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RatingService_GetAverageHostRating_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RatingServiceServer).GetAverageHostRating(ctx, req.(*GetAverageHostRatingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RatingService_ServiceDesc is the grpc.ServiceDesc for RatingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RatingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "RatingService",
	HandlerType: (*RatingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RateAccommodation",
			Handler:    _RatingService_RateAccommodation_Handler,
		},
		{
			MethodName: "DeleteAccommodationRating",
			Handler:    _RatingService_DeleteAccommodationRating_Handler,
		},
		{
			MethodName: "UpdateAccommodationRating",
			Handler:    _RatingService_UpdateAccommodationRating_Handler,
		},
		{
			MethodName: "GetAllAccommodationRatings",
			Handler:    _RatingService_GetAllAccommodationRatings_Handler,
		},
		{
			MethodName: "GetAverageAccommodationRating",
			Handler:    _RatingService_GetAverageAccommodationRating_Handler,
		},
		{
			MethodName: "FindAccommodationRatingById",
			Handler:    _RatingService_FindAccommodationRatingById_Handler,
		},
		{
			MethodName: "RateHost",
			Handler:    _RatingService_RateHost_Handler,
		},
		{
			MethodName: "UpdateHostRating",
			Handler:    _RatingService_UpdateHostRating_Handler,
		},
		{
			MethodName: "DeleteHostRating",
			Handler:    _RatingService_DeleteHostRating_Handler,
		},
		{
			MethodName: "GetHostRatings",
			Handler:    _RatingService_GetHostRatings_Handler,
		},
		{
			MethodName: "GetAverageHostRating",
			Handler:    _RatingService_GetAverageHostRating_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gateway_service.proto",
}

const (
	RecommendationService_GetRecommendedAccommodations_FullMethodName = "/RecommendationService/GetRecommendedAccommodations"
)

// RecommendationServiceClient is the client API for RecommendationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RecommendationServiceClient interface {
	GetRecommendedAccommodations(ctx context.Context, in *RecommendationRequest, opts ...grpc.CallOption) (*RecommendationResponse, error)
}

type recommendationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRecommendationServiceClient(cc grpc.ClientConnInterface) RecommendationServiceClient {
	return &recommendationServiceClient{cc}
}

func (c *recommendationServiceClient) GetRecommendedAccommodations(ctx context.Context, in *RecommendationRequest, opts ...grpc.CallOption) (*RecommendationResponse, error) {
	out := new(RecommendationResponse)
	err := c.cc.Invoke(ctx, RecommendationService_GetRecommendedAccommodations_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RecommendationServiceServer is the server API for RecommendationService service.
// All implementations must embed UnimplementedRecommendationServiceServer
// for forward compatibility
type RecommendationServiceServer interface {
	GetRecommendedAccommodations(context.Context, *RecommendationRequest) (*RecommendationResponse, error)
	mustEmbedUnimplementedRecommendationServiceServer()
}

// UnimplementedRecommendationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRecommendationServiceServer struct {
}

func (UnimplementedRecommendationServiceServer) GetRecommendedAccommodations(context.Context, *RecommendationRequest) (*RecommendationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecommendedAccommodations not implemented")
}
func (UnimplementedRecommendationServiceServer) mustEmbedUnimplementedRecommendationServiceServer() {}

// UnsafeRecommendationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RecommendationServiceServer will
// result in compilation errors.
type UnsafeRecommendationServiceServer interface {
	mustEmbedUnimplementedRecommendationServiceServer()
}

func RegisterRecommendationServiceServer(s grpc.ServiceRegistrar, srv RecommendationServiceServer) {
	s.RegisterService(&RecommendationService_ServiceDesc, srv)
}

func _RecommendationService_GetRecommendedAccommodations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecommendationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecommendationServiceServer).GetRecommendedAccommodations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecommendationService_GetRecommendedAccommodations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecommendationServiceServer).GetRecommendedAccommodations(ctx, req.(*RecommendationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RecommendationService_ServiceDesc is the grpc.ServiceDesc for RecommendationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RecommendationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "RecommendationService",
	HandlerType: (*RecommendationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRecommendedAccommodations",
			Handler:    _RecommendationService_GetRecommendedAccommodations_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gateway_service.proto",
}

const (
	NotificationService_SendNotification_FullMethodName              = "/NotificationService/SendNotification"
	NotificationService_CreateNotificationPreferences_FullMethodName = "/NotificationService/CreateNotificationPreferences"
	NotificationService_UpdateNotificationPreferences_FullMethodName = "/NotificationService/UpdateNotificationPreferences"
	NotificationService_FindById_FullMethodName                      = "/NotificationService/FindById"
)

// NotificationServiceClient is the client API for NotificationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NotificationServiceClient interface {
	SendNotification(ctx context.Context, in *SendNotificationRequest, opts ...grpc.CallOption) (*SendNotificationResponse, error)
	CreateNotificationPreferences(ctx context.Context, in *CreateNotificationPreferencesRequest, opts ...grpc.CallOption) (*CreateNotificationPreferencesResponse, error)
	UpdateNotificationPreferences(ctx context.Context, in *CreateNotificationPreferencesRequest, opts ...grpc.CallOption) (*CreateNotificationPreferencesResponse, error)
	FindById(ctx context.Context, in *FindNotificationPreferencesByIdRequest, opts ...grpc.CallOption) (*FindNotificationPreferencesByIdResponse, error)
}

type notificationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNotificationServiceClient(cc grpc.ClientConnInterface) NotificationServiceClient {
	return &notificationServiceClient{cc}
}

func (c *notificationServiceClient) SendNotification(ctx context.Context, in *SendNotificationRequest, opts ...grpc.CallOption) (*SendNotificationResponse, error) {
	out := new(SendNotificationResponse)
	err := c.cc.Invoke(ctx, NotificationService_SendNotification_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) CreateNotificationPreferences(ctx context.Context, in *CreateNotificationPreferencesRequest, opts ...grpc.CallOption) (*CreateNotificationPreferencesResponse, error) {
	out := new(CreateNotificationPreferencesResponse)
	err := c.cc.Invoke(ctx, NotificationService_CreateNotificationPreferences_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) UpdateNotificationPreferences(ctx context.Context, in *CreateNotificationPreferencesRequest, opts ...grpc.CallOption) (*CreateNotificationPreferencesResponse, error) {
	out := new(CreateNotificationPreferencesResponse)
	err := c.cc.Invoke(ctx, NotificationService_UpdateNotificationPreferences_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) FindById(ctx context.Context, in *FindNotificationPreferencesByIdRequest, opts ...grpc.CallOption) (*FindNotificationPreferencesByIdResponse, error) {
	out := new(FindNotificationPreferencesByIdResponse)
	err := c.cc.Invoke(ctx, NotificationService_FindById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NotificationServiceServer is the server API for NotificationService service.
// All implementations must embed UnimplementedNotificationServiceServer
// for forward compatibility
type NotificationServiceServer interface {
	SendNotification(context.Context, *SendNotificationRequest) (*SendNotificationResponse, error)
	CreateNotificationPreferences(context.Context, *CreateNotificationPreferencesRequest) (*CreateNotificationPreferencesResponse, error)
	UpdateNotificationPreferences(context.Context, *CreateNotificationPreferencesRequest) (*CreateNotificationPreferencesResponse, error)
	FindById(context.Context, *FindNotificationPreferencesByIdRequest) (*FindNotificationPreferencesByIdResponse, error)
	mustEmbedUnimplementedNotificationServiceServer()
}

// UnimplementedNotificationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNotificationServiceServer struct {
}

func (UnimplementedNotificationServiceServer) SendNotification(context.Context, *SendNotificationRequest) (*SendNotificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendNotification not implemented")
}
func (UnimplementedNotificationServiceServer) CreateNotificationPreferences(context.Context, *CreateNotificationPreferencesRequest) (*CreateNotificationPreferencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNotificationPreferences not implemented")
}
func (UnimplementedNotificationServiceServer) UpdateNotificationPreferences(context.Context, *CreateNotificationPreferencesRequest) (*CreateNotificationPreferencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNotificationPreferences not implemented")
}
func (UnimplementedNotificationServiceServer) FindById(context.Context, *FindNotificationPreferencesByIdRequest) (*FindNotificationPreferencesByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindById not implemented")
}
func (UnimplementedNotificationServiceServer) mustEmbedUnimplementedNotificationServiceServer() {}

// UnsafeNotificationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NotificationServiceServer will
// result in compilation errors.
type UnsafeNotificationServiceServer interface {
	mustEmbedUnimplementedNotificationServiceServer()
}

func RegisterNotificationServiceServer(s grpc.ServiceRegistrar, srv NotificationServiceServer) {
	s.RegisterService(&NotificationService_ServiceDesc, srv)
}

func _NotificationService_SendNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).SendNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_SendNotification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).SendNotification(ctx, req.(*SendNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_CreateNotificationPreferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNotificationPreferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).CreateNotificationPreferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_CreateNotificationPreferences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).CreateNotificationPreferences(ctx, req.(*CreateNotificationPreferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_UpdateNotificationPreferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNotificationPreferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).UpdateNotificationPreferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_UpdateNotificationPreferences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).UpdateNotificationPreferences(ctx, req.(*CreateNotificationPreferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_FindById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindNotificationPreferencesByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).FindById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_FindById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).FindById(ctx, req.(*FindNotificationPreferencesByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NotificationService_ServiceDesc is the grpc.ServiceDesc for NotificationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NotificationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "NotificationService",
	HandlerType: (*NotificationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendNotification",
			Handler:    _NotificationService_SendNotification_Handler,
		},
		{
			MethodName: "CreateNotificationPreferences",
			Handler:    _NotificationService_CreateNotificationPreferences_Handler,
		},
		{
			MethodName: "UpdateNotificationPreferences",
			Handler:    _NotificationService_UpdateNotificationPreferences_Handler,
		},
		{
			MethodName: "FindById",
			Handler:    _NotificationService_FindById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gateway_service.proto",
}
